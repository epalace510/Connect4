function [ output_args ] = learnerMove( input_args )
global moveSuccess;
global board;
global movesTaken;
%LEARNERMOVE Summary of this function goes here
%   Detailed explanation goes here

% First, load the stored moves (maybe do this in the playconnet4 method so
% it's only done once. If so, use a global var.)

% Next, read the current board state and determine the 7 possible next
% moves it can make. Check to see the success of those moves previously.
% Take the highest scoring one and execute it.
%array(column,row)
% state=cat(2,board(1,:),board(2,:),board(3,:),board(4,:),board(5,:),board(6,:),board(7,:));
% for l=1:size(tempBoard,1),
%     if(l>0)
%         if tempBoard(l,n)~=0
%             l=l-1;
%             break;
%         end
%     end
% end
score=0;
for i=1:7
    tempBoard=board;
    for l=1:size(tempBoard,1),
        if(l>0)
            if tempBoard(l,i)~=0
                l=l-1;
                break;
            end
        end
    end
    %Set the next possible move
    tempBoard(l,i)=2;
    %Reduce it to a 1 dimensional integer
    state=cat(2,tempBoard(1,:),tempBoard(2,:),tempBoard(3,:),tempBoard(4,:),tempBoard(5,:),tempBoard(6,:),tempBoard(7,:));
    %Find the score of the move.
    index=find(moveSuccess==state);
    if(~isempty(index))
        %Calculate the percentage won.
        tscore=moveSuccess(index,2)/moveSuccess(index,3);
    else
        %Create an entry for this state since we've never visited it
        %before. Give it 1/7 times won.
        tscore=1/7;
        newEntry=[state,1,7];
        moveSuccess=cat(1,moveSuccess,newEntry);
    end
    if tscore>score
        nextBoard=tempBoard;
    end
end
board=nextBoard;
state=cat(2,tempBoard(1,:),tempBoard(2,:),tempBoard(3,:),tempBoard(4,:),tempBoard(5,:),tempBoard(6,:),tempBoard(7,:));
movesTaken=cat(1,movesTaken,

% Add the chosen move to the list of moves taken this game (need global var
% for this)


end

